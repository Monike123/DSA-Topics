single

class Node:
    def __init__(self,data):
        self.data = data 
        self.next = None

class Single:
    def __init__(self):
        self.head = None
        
    def append(self,data):
        nn = Node(data)
        if self.head is None:
            self.head = nn
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = nn
    
    def delete(self,data):
        if self.head is None:
            return None
        if self.head.data == data:
            self.head = self.head.next
            return
        cur = self.head
        while cur.next:
            if cur.next.data == data:
                cur.next = cur.next.next
                return
            cur = cur.next
        
    def display(self):
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next
        print("none")
        
a = Single()
a.append(1)
a.append(2)
a.append(3)
a.append(4)
a.append(5)

a.display()

a.delete(3)
a.display()


########################################################################

double

class Dnode:
    def __init__(self,data):
        self.data = data
        self.next = None
        self.prev = None
        
class Double:
    def __init__(self):
        self.head = None
        
    def append(self,data):
        nn = Dnode(data)
        if self.head is None:
            self.head = nn
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = nn
        nn.prev = cur
        
    def delete(self,data):
        if self.head is None:
            return None
        if self.head.data == data:
            self.head = self.head.next
            if self.head:
                self.head.prev = None
            return
        cur = self.head
        
        while cur:
            if cur.data == data:
                if cur.next:
                    cur.next.prev = cur.prev
                if cur.prev:
                    cur.prev.next = cur.next
                    return
            cur = cur.next
            
    def display(self):
        cur = self.head
        while cur:
            print(cur.data,end=("<->" if cur.next else "->"))
            cur = cur.next
        print("None")
        
        
        
a = Double()
a.append(1)
a.append(2)
a.append(3)
a.append(4)
a.append(5)

a.display()

a.delete(2)
a.display()


##################################################################################

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        nn = Node(data)
        if self.head is None:
            self.head = nn
            nn.next = self.head  # Point to itself, making it circular
        else:
            cur = self.head
            while cur.next != self.head:  # Find the last node
                cur = cur.next
            cur.next = nn  # Last node's next points to the new node
            nn.next = self.head  # New node's next points back to head

    def delete(self, data):
        if self.head is None:
            print("The list is empty.")
            return

        cur = self.head
        prev = None

        # Case 1: If the head node itself is to be deleted
        if cur.data == data:
            if cur.next == self.head:  # If there's only one node in the list
                self.head = None
            else:
                while cur.next != self.head:  # Find the last node
                    cur = cur.next
                cur.next = self.head.next  # Point last node to the new head
                self.head = self.head.next  # Update head to next node
            print(f"Deleted {data}.")
            return

        # Case 2: If the node to be deleted is not the head
        cur = self.head
        while cur.next != self.head:
            prev = cur
            cur = cur.next
            if cur.data == data:
                prev.next = cur.next  # Bypass the node to be deleted
                print(f"Deleted {data}.")
                return

        # Case 3: If the node wasn't found in the list
        print(f"{data} not found in the list.")

    def display(self):
        if self.head is None:
            print("The list is empty.")
            return
        cur = self.head
        while True:
            print(cur.data, end=" -> ")
            cur = cur.next
            if cur == self.head:  # Stop when we come back to the head
                break
        print(f"{cur.data}")  # Print the last node value

# Example Usage
cll = CircularLinkedList()
cll.append(1)
cll.append(2)
cll.append(3)
cll.append(4)

print("Initial list:")
cll.display()

cll.delete(3)  # Delete an existing node
print("After deleting 3:")
cll.display()

cll.delete(1)  # Delete the head node
print("After deleting head (1):")
cll.display()

cll.delete(10)  # Try deleting a non-existent node

